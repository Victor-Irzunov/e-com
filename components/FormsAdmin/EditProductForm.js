"use client"
import React, { useEffect, useState } from 'react';
import { PlusOutlined } from '@ant-design/icons';
import { Button, InputNumber, Form, Input, Radio, message, Upload, Modal, Image, Popconfirm, Checkbox } from 'antd';
import { UploadOutlined } from '@ant-design/icons';
import { transliterate } from '@/transliterate/transliterate';
import { deleteOneImage, deleteOneProduct, updateOneProduct } from "@/http/adminAPI";
const { Dragger } = Upload; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Dragger –∏–∑ Ant Design
const { TextArea } = Input;


const getBase64 = (file) =>
	new Promise((resolve, reject) => {
		const reader = new FileReader();
		reader.readAsDataURL(file);
		reader.onload = () => resolve(reader.result);
		reader.onerror = (error) => reject(error);
	});

const brandData = ["Apple", "Samsung", "LG"];
const dataCategory = [
	{
		id: 1,
		category: { name: '–ú–æ–±–∏–ª—å–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã', value: 'mobilnye-telefony' },
		subCategories: [{ name: '–¢–µ–ª–µ—Ñ–æ–Ω—ã', value: 'telefony' }],
	},
	{
		id: 2,
		category: { name: '–ö–æ–º–ø—å—é—Ç–µ—Ä—ã', value: 'kompyutery' },
		subCategories: [{ name: '–ù–æ—É—Ç–±—É–∫–∏', value: 'noutbuki' }, { name: 'MacBook', value: 'macbook' }],
	},
];

const EditProductForm = ({ product, setProduct }) => {
	const [editedInfo, setEditedInfo] = useState('');
	const [subCategoryOptions, setSubCategoryOptions] = useState([]);
	const [form] = Form.useForm();
	const [thumbnailList, setThumbnailList] = useState([]); // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ –≥–ª–∞–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
	const [imageList, setImageList] = useState([]); // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
	const [previewOpen, setPreviewOpen] = useState(false);
	const [previewImage, setPreviewImage] = useState('');
	const [previewTitle, setPreviewTitle] = useState('');
	const [fileList, setFileList] = useState([]);

	useEffect(() => {
		if (product && product.images) {
			const formattedFileList = JSON.parse(product.images).map(imageObj => ({
				uid: imageObj.image, // –∏–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –¥—Ä—É–≥–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
				name: imageObj.image,
				status: 'done',
				url: `/uploads/${imageObj.image}`,
			}));
			setFileList(formattedFileList);
		}
	}, [product]);

	const props = {
		beforeUpload(file) {
			return new Promise((resolve) => {
				const reader = new FileReader();
				reader.readAsDataURL(file);
				reader.onload = () => {
					const img = document.createElement('img');
					img.src = reader.result;
					img.onload = () => {
						const canvas = document.createElement('canvas');
						canvas.width = img.naturalWidth;
						canvas.height = img.naturalHeight;
						const ctx = canvas.getContext('2d');
						ctx.drawImage(img, 0, 0);
						ctx.fillStyle = 'red';
						ctx.textBaseline = 'middle';
						ctx.font = '33px Arial';
						ctx.fillText('Fajne buty', 20, 20);
						canvas.toBlob((result) => resolve(result));
					};
				};
			});
		},
	};

	const onRemove = (image) => {
		if (!image.originFileObj) {
			deleteOneImage(product.id, image.name)
				.then(data => {
					console.log("üöÄ üöÄ üöÄ  _ onRemove _ data:", data)
				})
		}
	}


	const handleCancel = () => setPreviewOpen(false);

	const handlePreview = async (file) => {
		if (!file.url && !file.preview) {
			file.preview = await getBase64(file.originFileObj);
		}
		setPreviewImage(file.url || file.preview);
		setPreviewOpen(true);
		setPreviewTitle(file.name || file.url.substring(file.url.lastIndexOf('/') + 1));
	};


	const handleChange = ({ fileList: newFileList }) => setFileList(newFileList);

	useEffect(() => {
		if (product && product.info) {
			const infoArray = JSON.parse(product.info);
			const formattedInfo = infoArray.map(item => `${item.property}: ${item.value}`).join('\n');
			setEditedInfo(formattedInfo);
		}
	}, [product]);

	const handleInfoChange = (e) => {
		setEditedInfo(e.target.value);
	};

	const onFinish = async (values) => {
		console.log("üöÄ üöÄ üöÄ  _ onFinish _ values:", values)

		const infoArray = values.info ? values.info.split('\n').map(item => {
			const [property, value] = item.split(':').map(part => part.trim());
			return { property, value };
		}) : [];

		let titleLink = transliterate(values.title).replace(/\s+/g, '-').toLowerCase();

		const formData = new FormData();
		formData.append('title', values.title);
		formData.append('description', values.description);
		formData.append('price', values.price);
		formData.append('discountPercentage', values.discountPercentage || 0);
		formData.append('stock', values.stock);
		formData.append('category', values.category);
		formData.append('subcategory', values.subcategory);
		formData.append('brand', values.brand);
		formData.append('content', values.content);
		formData.append('rating', values.rating);
		formData.append('titleLink', titleLink);
		formData.append('info', JSON.stringify(infoArray));


		formData.append('banner', values.banner);
		formData.append('discounts', values.discounts);
		formData.append('povsednevnaya', values.povsednevnaya);
		formData.append('recommended', values.recommended);


		if (thumbnailList.length > 0) {
			formData.append('thumbnail', thumbnailList[0].originFileObj);
		}

		fileList.forEach(file => {
			if (file.originFileObj) {
				formData.append('images', file.originFileObj);
			} else {
				formData.append('images', file);
			}
		})

		updateOneProduct(product.id, formData)
			.then((data) => {
				message.success(data.message);
				form.resetFields();
				setProduct({})
				setThumbnailList([]);
				setImageList([]);
				setFileList([])
			})
			.catch((error) => {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞:', error);
				message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞');
			});
	}

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	const handleCategoryChange = (category) => {
		const categoryData = dataCategory.find((cat) => cat.category.value === category);
		if (categoryData) {
			setSubCategoryOptions(categoryData.subCategories);
			// –ï—Å–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ undefined
			form.setFieldsValue({ subcategory: undefined });
		}
	};

	const handleInfoPressEnter = (e) => {
		const value = e.target.value.trim();
		if (value) {
			const newInfo = value.split('/').map((item) => item.trim());
			setInfoArray([...infoArray, ...newInfo]);

			e.target.value = '';
		}
	};
	const confirm = () => {
		deleteOneProduct(product.id)
			.then(data => {
				message.success(data);
			})
	};

	return (
		<Form
			form={form}
			name="editProduct"
			onFinish={onFinish}
			labelCol={{ span: 24 }}
			wrapperCol={{ span: 24 }}
			initialValues={{
				title: product.title,
				description: product.description,
				price: product.price,
				discountPercentage: product.discountPercentage,
				stock: product.stock,
				category: product.category,
				subcategory: product.subcategory,
				brand: product.brand,
				rating: product.rating,
				info: JSON.parse(product.info).map(item => `${item.property}: ${item.value}`).join('\n'),
				content: product.content,
				banner: product.banner,
				discounts: product.discounts,
				povsednevnaya: product.povsednevnaya,
				recommended: product.recommended
			}}
		>
			{/*1 –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ */}
			<Form.Item
				label="–ù–∞–∑–≤–∞–Ω–∏–µ"
				name="title"
				rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞' }]}
			>
				<Input />
			</Form.Item>

			{/*2 –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ */}
			<Form.Item
				label="–û–ø–∏—Å–∞–Ω–∏–µ"
				name="description"
				rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞' }]}
			>
				<TextArea autoSize={{ minRows: 3 }} />
			</Form.Item>

			{/*3 –¶–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ */}
			<Form.Item
				label="–¶–µ–Ω–∞"
				name="price"
				rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞' }]}
			>
				<InputNumber min={0} step={0.01} />
			</Form.Item>

			{/*4 –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ */}
			<Form.Item
				label="–°–∫–∏–¥–∫–∞"
				name="discountPercentage"
			>
				<InputNumber min={0} max={100} />
			</Form.Item>

			{/*5 –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏ */}
			<Form.Item
				label="–ù–∞–ª–∏—á–∏–µ"
				name="stock"
				rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞' }]}
			>
				<InputNumber min={0} />
			</Form.Item>

			{/*6 –ö–∞—Ç–µ–≥–æ—Ä–∏—è */}
			<Form.Item label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
				name="category"
				rules={[{ required: true }]}
			>
				<Radio.Group onChange={(e) => handleCategoryChange(e.target.value)}>
					{dataCategory.map((el) => (
						<Radio.Button key={el.id} value={el.category.value}>
							{el.category.name}
						</Radio.Button>
					))}
				</Radio.Group>
			</Form.Item>

			{/*7 –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è */}
			<Form.Item
				label="–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è"
				name="subcategory"
				rules={[{ required: true }]}
			>
				<Radio.Group>
					{subCategoryOptions.map((subCategory) => (
						<Radio.Button key={subCategory.value} value={subCategory.value}>
							{subCategory.name}
						</Radio.Button>
					))}
				</Radio.Group>
			</Form.Item>


			{/*8 –ë—Ä–µ–Ω–¥ */}
			<Form.Item
				label="–ë—Ä–µ–Ω–¥"
				name="brand"
				rules={[{ required: true }]}
			>
				<Radio.Group>
					{
						brandData.map(el => (
							<Radio.Button key={el} value={el}>{el}</Radio.Button>
						))
					}
				</Radio.Group>
			</Form.Item>

			{/*9 –†–µ–π—Ç–∏–Ω–≥ */}
			<Form.Item
				label="–†–µ–π—Ç–∏–Ω–≥"
				name="rating"
			>
				<InputNumber min={0} max={5} step={0.1} />
			</Form.Item>

			{/*10 –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
			<div className=''>
				{
					JSON.parse(product.thumbnail).length ?
						<Image width={200} src={`${process.env.NEXT_PUBLIC_BASE_URL}/uploads/${JSON.parse(product.thumbnail)[0].image}`} />
						:
						<p className='text-red-400'>
							–Ω–µ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
						</p>
				}

				<Form.Item
					label="–ò–∑–º–µ–Ω–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
					name="thumbnail"
				>
					<Upload
						accept="image/*"
						fileList={thumbnailList}
						beforeUpload={() => false}
						onChange={({ fileList }) => setThumbnailList(fileList)}
					>
						<Button icon={<UploadOutlined />}>–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</Button>
					</Upload>
				</Form.Item>
			</div>



			{/*11 –î–æ–ø. –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
			<div className='mt-10 mb-10'>
				<p className='mb-3'>
					–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
				</p>

				<Form.Item
					label=""
					name="images"
				>
					<Dragger
						action="https://run.mocky.io/v3/435e224c-44fb-4773-9faf-380c5e6a2188"
						fileList={fileList}
						onPreview={handlePreview}
						onChange={handleChange}
						onRemove={onRemove}
						multiple={true}
						listType="picture-card"
						accept="image/*"
						maxCount={8}
						{...props}
					>
						{fileList.length < 8 && (
							<div className=''>
								<PlusOutlined />
								<div className="ant-upload-text">–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>
							</div>
						)}
					</Dragger>
				</Form.Item>

				<Modal visible={previewOpen} title={previewTitle} footer={null} onCancel={handleCancel}>
					<img
						alt="example"
						style={{
							width: '100%',
						}}
						src={previewImage}
					/>
				</Modal>
			</div>


			{/*12 –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
			<Form.Item
				label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
				name="info"
			>
				<TextArea
					autoSize={{ minRows: 3 }}
					onPressEnter={handleInfoPressEnter} // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ Enter
				/>
			</Form.Item>

			{/*13 –ö–æ–Ω—Ç–µ–Ω—Ç */}
			<Form.Item
				label="–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ç–æ–≤–∞—Ä–∞"
				name="content"
				rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ–¥—É–∫—Ç–∞' }]}
			>
				<TextArea autoSize={{ minRows: 3 }} />
			</Form.Item>

			{/*14 –ë–∞–Ω–Ω–µ—Ä */}
			<Form.Item
				label="–ë–∞–Ω–Ω–µ—Ä –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
				name="banner"
				valuePropName="checked"
			>
				<Checkbox>–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ –≥–ª–∞–≤–Ω—É—é</Checkbox>
			</Form.Item>

			{/*15 –ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏ */}
			<Form.Item
				label="–ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π"
				name="discounts"
				valuePropName="checked"
			>
				<Checkbox>–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ –≥–ª–∞–≤–Ω—É—é</Checkbox>
			</Form.Item>

			{/*16 –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã */}
			<Form.Item
				label="–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π"
				name="povsednevnaya"
				valuePropName="checked"
			>
				<Checkbox>–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ –≥–ª–∞–≤–Ω—É—é</Checkbox>
			</Form.Item>

			{/*16 –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ */}
			<Form.Item
				label="–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã"
				name="recommended"
				valuePropName="checked"
			>
				<Checkbox>–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ</Checkbox>
			</Form.Item>


			<div className='flex justify-end mb-8'>
				<Popconfirm
					title="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"
					description="–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä?"
					onConfirm={confirm}
					// onCancel={cancel}
					okText="–î–∞"
					cancelText="–ù–µ—Ç"
					className=''
				>
					<Button danger size='small'>–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä</Button>
				</Popconfirm>
			</div>
			{/* –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" */}
			<Form.Item >
				<Button type="primary" className='text-black bg-white' htmlType="submit">
					–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
				</Button>
			</Form.Item>


		</Form>
	);
};

export default EditProductForm;
